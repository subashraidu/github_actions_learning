What is GitHub Actions?

GitHub Actions is a CI/CD (Continuous Integration and Continuous Deployment) platform built directly into GitHub.
It allows you to automate any part of your development lifecycle like
Running tests automatically on every push or pull request
Building and deploying code
Running scripts (linting, formatting, packaging, etc.)

Github action files are defined as YAML files located in the .github/workflow folder in your repo
You can multiple workflows in a repo triggered by different events

# components of git hub:

Component                         |  Description                                                               |  Example                    
----------------------------------+----------------------------------------------------------------------------+-----------------------------
Workflow                          |  The main YAML file that defines automation. Stored in.github/workflows/.  |  main.yml                   
Event                             |  Defines what triggers the workflow to run.                                |  on: push                   
Job                               |  A group of steps that run on the same runner.                             |  build,test,deploy          
Step                              |  A single task within a job. Can run commands or actions.                  |  run: npm test              
Action                            |  Prebuilt, reusable code that simplifies tasks.                            |  uses: actions/checkout@v5  
Runner                            |  The execution environment for the jobs (GitHub-hosted or self-hosted).    |  ubuntu-latest              
Environment Variables (Env Vars)  |  Configuration values accessible to steps.                                 |  env: VERSION: 1.0          
Secrets                           |  Secure, encrypted values used for credentials or tokens.                  |  ${{ secrets.TOKEN }}       
Artifacts                         |  Files saved from a job (e.g., logs, build outputs).                       |  Upload logs or test results
Cache                             |  Stores reusable dependencies to speed up builds.                          |  npm or pip cache           
Matrix                            |  Defines multiple job variants for testing across versions or OSes.        |  Node versions 14, 16, 18   


GitHub Actions workflows must be stored inside this specific folder:
.github/workflows/

GitHub does not scan other folders for workflows — only .yml or .yaml files inside .github/workflows/ are recognized as valid workflows.

needs:
The needs: keyword defines dependencies between jobs — i.e., which jobs must finish successfully before another job can start.
Jobs can run in parallel unless they are linked by needs.
If one of the needs jobs fails, then the dependent job won’t run.

on:
A triggering event (defined under the on: keyword) is what starts a workflow automatically or 
manually.
Every time the specified event happens in your repository — like a push, pull request, or
issue — GitHub checks your workflow file and decides whether to run it.

| Category            | Event                                                                    | Description                         |
| ------------------- | ------------------------------------------------------------------------ | ----------------------------------- |
| **Code-related**    | `push`, `pull_request`, `workflow_dispatch`, `schedule`, `workflow_call` | Most common workflow triggers       |
| **Repo management** | `create`, `delete`, `release`, `fork`                                    | Branch or tag activity              |
| **Collaboration**   | `issues`, `issue_comment`, `pull_request_review`                         | When users interact with issues/PRs |
| **Advanced CI/CD**  | `workflow_run`, `deployment`, `repository_dispatch`                      | Chaining and external triggers      |

Environment variables help you:
✅ Avoid repeating values (e.g. Python version, app name, paths)
✅ Pass configuration between steps/jobs
✅ Hide sensitive info (via GitHub Secrets)
✅ Make workflows dynamic and easier to maintain

| Level           | Scope          | Example                    | Accessed By      |
| --------------- | -------------- | -------------------------- | ---------------- |
| Workflow        | All jobs       | `env: { VAR: value }`      | `$VAR`           |
| Job             | Single job     | `jobs.build.env`           | `$VAR`           |
| Step            | Single step    | `steps.run.env`            | `$VAR`           |
| GitHub Built-in | System-defined | `$GITHUB_REF_NAME`         | Always available |
| Secret          | Secure value   | `${{ secrets.MY_SECRET }}` | Safe in logs     |

What Is a Runner?
A runner is a machine (virtual or physical) that executes the jobs defined in your GitHub Actions workflow.
When a workflow runs, GitHub picks a runner and executes the steps in that job on it.

| Type                                        | Description                                                                           | Where It Runs                       | Example Use Case                                 |
| ------------------------------------------- | ------------------------------------------------------------------------------------- | ----------------------------------- | ------------------------------------------------ |
| **1. GitHub-Hosted Runner**                 | Provided & maintained by GitHub. You don’t manage or configure it.                    | On GitHub’s cloud infrastructure    | CI/CD for open-source or small projects          |
| **2. Self-Hosted Runner**                   | You install and manage it on your own machine, VM, or cloud instance.                 | Your own infrastructure             | Build in private network, or faster local builds |
| **3. 3rd-Party Runner (Custom/Enterprise)** | Provided by a vendor (e.g. Actions Runner Controller for Kubernetes, CircleCI, etc.). | External systems or managed service | Used in large orgs with advanced infrastructure  |

Self-Hosted Runners Setup Steps:
Step 1 — Go to your repo
GitHub Repository → Settings → Actions → Runners → New self-hosted runner
Step 2 — Choose OS (Linux, Windows, macOS)
Step 3 — Copy the registration command

jobs:
  build:
    runs-on: self-hosted
    steps:
      - run: echo "Running on my own runner"


